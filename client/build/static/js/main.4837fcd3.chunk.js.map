{"version":3,"sources":["components/Header.js","components/SongList.js","components/Playlist.js","components/MusicColumn.js","components/BloomGraph.js","components/CommandColumn.js","components/App.js","index.js"],"names":["Header","props","className","style","onClick","window","location","href","user","fetched","loggedIn","display","alignItems","justifyContent","width","type","height","setUser","name","profilePic","playlists","accessToken","setState","analyzed","setSongSelection","setSelection","playlist","songs","whiteSpace","overflow","textOverflow","src","alt","SongList","map","song","id","uri","songSelection","backgroundColor","focusOn","artists","join","Playlist","analyzePlaylist","playlistName","fetch","headers","body","JSON","stringify","method","then","res","json","i","score","song_scores","cluster","state","playlistID","playlistSongs","moddedSongs","console","log","catch","err","MusicColumn","useState","removedSongs","setRemovedSongs","saving","setSaving","itemsHeight","shown","selection","length","substring","filter","includes","overflowY","flexDirection","margin","marginTop","u","newSelection","tempSong","newSongURIs","data","saveCopy","fetcned","document","getElementById","scrollTo","title","frameBorder","allowtransparency","allow","BloomGraph","fgRef","useRef","node","distRatio","Math","hypot","x","y","z","current","cameraPosition","idToNode","handleClick","useCallback","targetSong","forEach","scrollIntoView","behavior","block","setFocusOn","useEffect","ref","onNodeClick","nodeVisibility","CommandColumn","colDims","setColDims","idToCluster","colorSeed","random","graphData","clusters","push","nodes","round","links","Object","keys","cluster_i","URIs","linkIds","uriIndex","indexOf","Array","randIndex","randUri","dims","getBoundingClientRect","nodeAutoColorBy","d","showNavInfo","d3VelocityDecay","React","memo","App","hash","replace","username","initializeUser","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4837fcd3.chunk.js","sourcesContent":["import React from \"react\"\nimport ReactLoading from \"react-loading\"\nimport \"../App.css\"\n\nconst Header = (props) => {\n    const toggleLogin = () => {   \n        if (!props.user.loggedIn) {\n            window.location.href=\"http://catchthatflow.com:9000/spotify/login\"  // consider useHistory hook\n        }\n        else {\n            props.setUser({\n                name: \"Guest\",\n                profilePic: \"\",\n                playlists: [],\n                loggedIn: false,\n                accessToken: \"\",\n                fetched: false,\n            })\n            props.setState({\n                fetched: false,\n                analyzed: false,\n            })\n            props.setSongSelection(\"\")\n            props.setSelection({\n                playlist: {\n                    name: \"\",\n                    songs: [],\n                }\n            })\n        }\n    }\n\n    return (\n        <>\n        <div className=\"Row\">\n            <div className=\"RowItem\" style={{\"justifyContent\": \"flex-start\", \"marginLeft\": \"5%\"}}>\n                <div className=\"Source\">\n                    <div className=\"Info\">\n                        <button \n                            className=\"HeaderButton\"\n                            onClick={() => {window.location.href=\"https://github.com/gholmes829/Flow\"}}\n                        >\n                            Source\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"RowItem\">\n                <div className=\"Title\">Flow</div>\n            </div>\n            <div className=\"RowItem\" style={{\"justifyContent\": \"flex-end\", \"marginRight\": \"5%\"}}>\n                <div className=\"Login\">\n                    {\n                        props.user.fetched && !props.user.loggedIn ?\n                            <div style = {{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"space-evenly\",\n                                width: \"100%\"\n                            }}>\n                                \n                                <div style={{\n                                    width: \"50px\",\n                                }}>\n                                    <ReactLoading type={\"cylon\"} height={\"100%\"} width={\"100%\"} />\n                                </div>\n                            </div>\n                        :\n                        <>\n                        <div className=\"Info\">\n                            <button className=\"HeaderButton\" onClick={toggleLogin}>{!props.user.loggedIn ? \"Login\" : \"Logout\"}</button>\n                        </div>\n                        <div className=\"Info\"\n                        \n                        style={{\n                            whiteSpace: \"nowrap\",\n                            overflow: \"hidden\",\n                            textOverflow: \"ellipsis\"\n                        }}\n                        \n                        >{\n                                !props.user.fetched && !props.user.loggedIn  ?\n                                    \"Guest\"\n                                :\n                                \"\\\"\" + props.user.name + \"\\\"\"\n                            }\n                        </div>\n                        <div className=\"Info\">\n                        {props.user.profilePic === \"\"\n                            ? <img className=\"ProfilePic\" src=\"/assets/unknown.jpg\" alt=\"Unknown Pic\"></img>\n                            : <img className=\"ProfilePic\" src={props.user.profilePic} alt=\"Profile Pic\"></img>}\n                        </div>\n                        </>\n                    }\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Header;","import React from \"react\"\nimport \"../App.css\"\n\nconst SongList = (props) => {\n    return (\n        <>\n        {props.songs.map(song =>\n            <button\n                id={song.uri}\n                className=\"Selectable\"\n                key={song.uri}\n                style = {(() => {\n                    if (song.uri === props.songSelection.uri) {\n                        return {backgroundColor: \"#8D8D8D\"}\n                    }\n                    else {\n                        return {}\n                    }\n                })()}\n                onClick = {() => {\n                    props.setSongSelection(song)\n                    props.focusOn(song.uri)\n                }\n            }>\n                {\"\\\"\" + song.name + \"\\\" - \" + song.artists.join(\", \") // \"\\\" (\" + Math.round(100 * song.score) / 100 + \"% match, clusterID = \" + song.cluster + \")\"}\n                                        }\n            </button>)}\n        </>\n    )\n}\n\nexport default SongList","import React from \"react\"\nimport \"../App.css\"\n\nconst Playlist = (props) => {    \n    const updatePlaylistSelection = (playlistID, playlistName) => {\n        props.setState({\n            ...props.state,\n            fetched: true,\n        })\n        fetch(\"http://catchthatflow.com:9000/spotify/playlist/\" + playlistID + \"/\" + props.user.accessToken)\n        .then(res => res.json())\n\t\t.then(res => res[\"playlist\"])\n        .then(playlistSongs => {\n            if (playlistSongs) {\n                let moddedSongs = playlistSongs.map(song => ({\n                    ...song,\n                    score: \"\",\n                    cluster: \"\",\n                }))\n                props.setSongSelection(playlistSongs[0])\n                analyzePlaylist(moddedSongs, playlistName)\n            }\n            else {\n                console.log(\"Potential error from excess API requests!!!\");\n            }\n        })\n        .catch(err => console.log(\"Error: \" + err))\n        \n    }\n\n    const analyzePlaylist = (songs, playlistName) => {\n        fetch(\"http://catchthatflow.com:9000/spotify/analyzePlaylist\", {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({songs: songs}),\n            method: \"POST\"\n        })\n        .then(res => res.json())\n        .then(res => {\n            props.setSelection({\n                playlist: {\n                    name: playlistName,\n                    songs: songs.map((song, i) => ({\n                        ...song,\n                        score: res.song_scores[i].score,\n                        cluster: res.song_scores[i].cluster\n                    }))\n                }\n            })\n            props.setState({\n                ...props.state,\n                analyzed: true,\n            })\n        })\n    }\n\n    return (\n        <>\n        {props.user.playlists.map(playlist =>\n            <button\n                className=\"Selectable\"\n                key={playlist.id}\n                onClick = {() => {\n                        updatePlaylistSelection(playlist.id, playlist.name);\n                    }\n            }>\n                {playlist.name}\n            </button>)}\n        </>\n    )\n}\n\nexport default Playlist","import React, {useState} from \"react\"\nimport ReactLoading from \"react-loading\"\nimport SongList from \"./SongList\"\nimport Playlist from \"./Playlist\"\nimport \"../App.css\"\n\nconst MusicColumn = (props) => {\n    const [removedSongs, setRemovedSongs] = useState([])\n    const [saving, setSaving] = useState(false)\n\n    const removeSong = (song) => {\n        if (!removedSongs.includes(song.uri)) {\n            setRemovedSongs((u) => {\n                let newSelection = props.selection.playlist.songs\n                .filter(tempSong => (!removedSongs.includes(tempSong.uri) && (tempSong.uri !== song.uri)))[0]\n                props.setSongSelection(newSelection)\n                return [...removedSongs, song.uri]})\n        }\n    }\n\n    const saveCopy = () => { \n        setSaving(true)\n        let newSongURIs = props.selection.playlist.songs\n        .filter((song) => !removedSongs.includes(song.uri))\n        .map(song => \"spotify:track:\" + song.uri)\n        \n        fetch(\"http://catchthatflow.com:9000/spotify/createPlaylist/\" + props.selection.playlist.name + \" (Flow Copy)/\" + props.user.accessToken, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({data: newSongURIs}),\n            method: \"POST\"\n        })\n        .then(res => {\n            setSaving(false)\n            //alert(\"Playlist saved successfully!\")\n        })\n        .catch(err => console.log(\"Error: \" + err))\n    }\n\n    let itemsHeight = \"100%\" // 0.325 * window.screen.height\n\n    return (\n        <>\n        <div className=\"Column\">\n            <div className=\"Text\" style={{\n                whiteSpace: \"nowrap\",\n                textOverflow: \"ellipsis\"\n            }}>\n                {(() => {\n                    let name = props.selection.playlist.name\n                    let shown\n                    if (name.length <= 12) {\n                        shown = name\n                    }\n                    else {\n                        shown = name.substring(0, 12) + \"...\"\n                    }\n\n                    return props.selection.playlist.name ? shown + \" (Copy)\" : \"My Playlists\"\n                })()}\n            </div>\n            \n                {(() => {\n                    if (props.user.loggedIn && props.state.analyzed) {\n                        return (\n                            <div className=\"Items\" id=\"Music\" style={{height: itemsHeight}}>\n                            <SongList\n                                selection = {props.selection}\n                                setSelection = {props.setSelection}\n                                songSelection = {props.songSelection}\n                                setSongSelection = {props.setSongSelection}\n                                songs = {props.selection.playlist.songs.filter(song => !removedSongs.includes(song.uri))}\n                                focusOn = {props.focusOn}\n                            />\n                            </div>\n                        )\n                    }\n                    else if ((props.user.fetched && !props.user.loggedIn) || (props.user.loggedIn && props.state.fetched && !props.state.analyzed)) {\n\n                        return (\n                            <div className=\"Items\" id=\"Music\" style={{\n                                    overflowY: \"hidden\",\n                                    height: itemsHeight,\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\"\n                                }}>\n                                <div style={{\n                                    width: \"50%\",\n                                    margin: \"auto\",\n                                    marginTop: \"10%\",\n                                    height: \"50%\",\n                                }}>\n                                    <ReactLoading type={\"spin\"} height={\"100%\"} width={\"100%\"} />\n                                </div>\n                            </div>\n                        )\n                    }\n                    else if (props.user.loggedIn && !props.state.fetched) {\n                        return (\n                            <div className=\"Items\" id=\"Music\" style={{height: itemsHeight}}>\n                            <Playlist\n                                user = {props.user}\n                                selection = {props.selection}\n                                setSelection = {props.setSelection}\n                                setSongSelection = {props.setSongSelection}\n                                setState = {props.setState}\n                                state = {props.state}\n                            />\n                            </div>\n                        )\n                    }\n                    else if (!props.user.loggedIn) {\n                        return (\n                            <div className=\"Items\" id=\"Music\" style={{height: itemsHeight}}>\n                            <><br></br>Log in and select playlist...</>\n                            </div>\n                        )\n                    }\n                })()}\n            \n            <div className=\"Controls\">\n                {!props.state.analyzed ? \n                <>\n                    <button className=\"Unactive\">Remove Song</button> \n                    <button className=\"Unactive\">Save a Copy</button> \n                    <button className=\"Unactive\">Back</button>   \n                </> \n                :\n                <> \n                    <button\n                        className=\"Control\"\n                        onClick={() => removeSong(props.songSelection)}\n                    >Remove Song</button>\n                    {saving ?\n                        <button className=\"Unactive\">Saving...</button> \n                        :\n                        <button\n                            className=\"Control\"\n                            onClick={() => saveCopy()}\n                        >Save Copy</button>\n                    }                  \n                        <button\n                        className=\"Control\"\n                        onClick={() => {\n                            props.setState({\n                                ...props.state,\n                                fetcned: false,\n                                analyzed: false,\n                            })\n                            props.setSelection({playlist: {songs: [], name: \"\"}})\n                            props.setSongSelection(\"\")\n                            let music = document.getElementById(\"Music\")\n                            music.scrollTo(0, 0)\n                            setRemovedSongs([])\n                            // update playlists\n                            fetch(\"http://catchthatflow.com:9000/spotify/userData/\" + props.user.accessToken)\n                            .then(res => res.json())\n                            .then(res => {\n                                props.setUser(() => ({\n                                    ...props.user,\n                                    playlists: res.playlists\n                                }))\n                            })\n                            .catch(err => console.log(\"Error: \" + err));\n                        }}\n                    >Back</button> \n                </>\n                }\n            </div>\n            <div className=\"FrameContainer\">\n                {(props.state.fetched && !props.state.analyzed) ?\n                    <div style={{\n                        margin: \"auto\",\n                        width: \"22.5%\",\n                        overflow: \"hidden\"\n                    }}>\n                        <ReactLoading type={\"cylon\"} height={\"80px\"} width={\"80px\"} />\n                    </div>\n                    :\n                    <iframe\n                        title=\"Sample\"\n                        src={ \n                            (() => {\n                                if (props.songSelection && props.state.analyzed) {\n                                    return \"https://open.spotify.com/embed/track/\" + props.songSelection.uri\n                                }\n                                else {\n                                    return \"\"\n                                }\n                            })()\n                        }\n                        width=\"100%\"\n                        height=\"80px\"\n                        frameBorder=\"0\"\n                        allowtransparency=\"true\"\n                        allow=\"encrypted-media\">\n                    </iframe>\n                }\n            </div>\n        </div>\n    </>\n    )\n}\n\nexport default MusicColumn","\nimport React, { useRef, useEffect, useCallback } from \"react\"\nimport ForceGraph3D from \"react-force-graph-3d\"\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\n\nconst BloomGraph = props => {\n    const fgRef = useRef()\n\n    const focusOn = (node) => {\n        const distance = 60\n        const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z)\n\n        fgRef.current.cameraPosition(\n          { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n          node, // lookAt ({ x, y, z })\n          3000  // ms transition duration\n        )\n    }\n\n    let idToNode = {}\n\n    const handleClick = useCallback(node => {\n        // Aim at node from outside it\n        let targetSong\n        props.songs.forEach(song => {\n            if (node.id === song.uri) {\n                targetSong = song\n            } \n        })\n        props.setSongSelection(targetSong)\n        document.getElementById(node.id).scrollIntoView({ behavior: \"auto\", block: \"center\"})\n\n        focusOn(node)\n    }, [fgRef])\n\n    const setFocusOn = props.setFocusOn\n\n    // useEffect(() => {\n    //     const bloomPass = new UnrealBloomPass()\n    //     bloomPass.strength = 1\n    //     bloomPass.radius = 1\n    //     bloomPass.threshold = 0.075\n    //     fgRef.current.postProcessingComposer().addPass(bloomPass)\n    // }, [])\n\n    useEffect(() => {\n        setFocusOn(() => (id) => focusOn(idToNode[id]))\n    }, [setFocusOn])\n\n    return (\n        <ForceGraph3D\n            ref={fgRef}\n            {...props}\n            onNodeClick={handleClick}\n            nodeVisibility = {(node) => {  // uses this as access point to update idToNode\n                idToNode[node.id] = node\n                if (\"nodeVisibility\" in props) {\n                    return props.nodeVisibility(node)\n                }\n                else {\n                    return true\n                } \n            }}\n        />\n    )\n}\n\nexport default BloomGraph","import React, { useState, useEffect } from \"react\"\nimport BloomGraph from './BloomGraph'\nimport \"../App.css\"\n\nconst CommandColumn = props => {\n    const [colDims, setColDims] = useState(\"\")\n    // when initial song gets selected, set it to dark color\n    // might be a bug with song selection and color\n\n    let idToCluster = {}\n    let colorSeed = 100 * Math.random()\n    \n    let graphData = (() => {\n        if (props.songs.length && props.songs[0].score !== \"\") {\n            let clusters = {}\n            let maxSizeRatio = 30\n            props.songs.forEach((song) => {\n                if (!(song.cluster in clusters)) {\n                    clusters[song.cluster] = [song.uri]\n                }\n                else {\n                    clusters[song.cluster].push(song.uri)\n                }\n                idToCluster[song.uri] = song.cluster\n            })\n\n            // array of objects with id, name, and val\n            let nodes = props.songs.map((song) => ({\n                \"id\": song.uri,\n                \"name\": \"\\\"\" + song.name + \"\\\" (\" + Math.round(100 * song.score) / 100 + \"% match)\",\n                \"val\": 1 + (maxSizeRatio * song.score / 100)\n            }))\n\n            // list of objects with source and target (ids)\n            let links = []\n\n            Object.keys(clusters).forEach((cluster_i) => {\n                let URIs = clusters[cluster_i]\n                let linkIds = {}\n                URIs.forEach(uri => {linkIds[uri] = 0})\n                URIs.forEach(uri => {\n                    let uriIndex = URIs.indexOf(uri)\n                    let chances = 5\n                    let successRate = 0.05\n\n                    if (uriIndex !== (URIs.length - 1)) {\n                        links.push({\n                            \"source\": uri,\n                            \"target\": URIs[uriIndex + 1]\n                        })\n                    }\n\n                    ([...Array(chances).keys()]).forEach(i => {\n                        if (Math.random() < successRate) {\n                            let randIndex = Math.round((URIs.length - 1) * Math.random())\n                            let randUri = URIs[randIndex]\n                            if (randUri !== uri) {\n                                links.push({\n                                    \"source\": uri,\n                                    \"target\": randUri\n                                })\n                            }\n                        }\n                    })\n\n                })\n            })\n            return {\n                \"nodes\": nodes,\n                \"links\": links\n            }\n        }\n        else {\n            return {}\n        }\n    })()\n\n    useEffect(() => {\n        let dims = document.getElementById(\"CmdItems\").getBoundingClientRect()\n        setColDims(() => ({\n            width: dims.width,\n            height: dims.height\n        }))\n    }, [])\n\n    \n\n    return (\n        <>\n        <div className=\"Column\" style={{\"width\": \"63.5%\"}}>\n            <div className=\"Text\">Analysis Results</div>\n            <div className=\"Items\" id = {\"CmdItems\"} style={{\"height\": \"100%\", \"overflowY\": \"hidden\"}}>\n                {props.songs.length && props.songs[0].score !== \"\" ?\n                    <BloomGraph\n                        graphData={graphData}\n                        width = {colDims.width}\n                        height = {colDims.height}\n                        nodeAutoColorBy = {d => {\n                            return idToCluster[d.id] + colorSeed\n                        }}\n                        showNavInfo = {false}\n                        d3VelocityDecay = {0.55}\n                        songs = {props.songs}\n                        setFocusOn = {props.setFocusOn}\n                        //songSelection = {props.songSelection}\n                        setSongSelection = {props.setSongSelection}\n                    />\n                    :\n                    <div style={{\"width\": \"90%\", \"margin\": \"auto\", \"fontSize\": \"small\"}}>\n                        <br></br>\n                        <h2>Notes:</h2>\n                        <p>\n                            1) Analysis will show clustering and cohesion of songs in playlist.<br></br><br></br>\n                            2) Songs in large clusters with high scores are a good fit!<br></br><br></br>\n                            3) Song scores are all relative to the playlist, so every playlist has a \"perfectly good\" and \"perfectly bad\" fitting song.<br></br><br></br>\n                            4) Algorithm is randomly initialized so analysis results for a given playlist may change.<br></br><br></br>\n                            5) Links between nodes within a given cluster are randomly generated and thus have no meaning.\n                        </p>\n                    </div>\n                }\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default React.memo(CommandColumn)","import React, { useState, useEffect } from \"react\"\nimport Header from \"./Header\"\nimport MusicColumn from \"./MusicColumn\"\nimport CommandColumn from \"./CommandColumn\"\nimport \"../App.css\"\n\n\n// TODO: make new refresh interval that checks expiration and refreshes access token before expiration\n\nconst App = () => {\n    // state variables\n    const [user, setUser] = useState({\n        name: \"Guest\",\n        profilePic: \"\",\n        playlists: [],\n        loggedIn: false,\n        accessToken: \"\",\n        fetched: false,\n    })\n\n    const [state, setState] = useState({\n        fetched: false,\n        analyzed: false,\n    })\n    \n    const [selection, setSelection] = useState({\n        playlist: {\n            name: \"\",\n            songs: [],\n        }\n    })\n\n    const [focusOn, setFocusOn] = useState(() => {})\n\n    const [songSelection, setSongSelection] = useState(\"\")\n\n    useEffect(() => {\n        const initializeUser = () => {\n            if (window.location.hash.includes(\"success-\")) {\n                setUser((u) => ({\n                    ...u,\n                    fetched: true,\n                }))\n                let accessToken = window.location.hash.replace(\"#login-success-\", \"\")\n                window.location.hash = \"#login-success\"\n                fetch(\"http://catchthatflow.com:9000/spotify/userData/\" + accessToken)\n                .then(res => res.json())\n                .then(res => {\n                    setUser((u) => ({\n                        ...u,\n                        name: res.username,\n                        profilePic: res.profilePic,\n                        playlists: res.playlists,\n                        loggedIn: true,\n                        accessToken: accessToken,\n                    }))\n                })\n                .catch(err => console.log(\"Error: \" + err));\n            }\n            else {\n                window.location.hash = \"#sign-in\";\n            }\n        }\n\n        initializeUser()\n    }, [])\n    \n    return (\n        <div className=\"App\">      \n            <Header\n                user = {user}\n                setUser = {setUser}\n                setSelection = {setSelection}\n                setState = {setState}\n                setSongSelection = {setSongSelection}\n            />\n        \n            <div className=\"Columns\">\n                <MusicColumn\n                    user = {user}\n                    setUser = {setUser}\n                    selection = {selection}\n                    setSelection = {setSelection}\n                    songSelection = {songSelection}\n                    setSongSelection = {setSongSelection}\n                    state = {state}\n                    setState = {setState}\n                    focusOn = {focusOn}\n                />\n                <CommandColumn\n                    songs = {selection.playlist.songs}\n                    setFocusOn = {setFocusOn}\n                    setSongSelection = {setSongSelection}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}